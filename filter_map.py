# 函数式编程
# python主要提供了 map、filter、reduce这几个函数
# 这几个函数一般结合lambda匿名函数一起使用
# 如果不使用这几个函数，同样可以用lambda、for循环、列表推导式来实现
# 但是，这几个函数的效率是最高的，比如map，是直接由c语言写的

print('--------------------------------------map()---------------------------------------------------------')

# map(函数，可迭代对象)
l = [1, 2, 3, 4]
l1 = list(map(lambda x: x*2, l))  # 等价于
print(l1)

# 只使用lambda函数，不使用map
l = [1, 2, 3, 4]
l2 = [(lambda x: x*2)(x) for x in l]  # 等价于
print(l1)

# 使用列表推导式
l3 = [x**2 for x in l]
print(l3)

print('--------------------------------------filter()--过滤-------------------------------------------------------')

# filter(函数, 可迭代对象)

# 案例1
# 返回一个列表中的所有偶数
l = [1, 2, 3, 4, 5]
l1 = list(filter(lambda x: x % 2 == 0, l))  # 容易出现错误
print(l1)

# 案例2
con = ['a', 'b', 'c', '', 0, None, [], (), {}, set()]
con = list(filter(None, con))  # 可以过滤0、None、空字符串、空列表、空字典、空元组等，注意别过滤多了
print(con)  # ['a', 'b', 'c']

print('--------------------------------------reduce()--对一个集合做累积操作-------------------------------------------------------')

# reduce(函数，可迭代对象)
# 案例：计算列表元素的乘积
from functools import reduce
l = [1, 2, 3, 4, 5]
ll = reduce(lambda x, y: x*y, l)
print(ll)
